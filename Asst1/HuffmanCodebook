\
int	000000000000
p2	000000000001
buffer	000000000010
ArrayList	000000000011
char	00000000010
array);	00000000011
1);	0000000010
dir->d_name);	0000000011
top	000000010
path);	000000011
fd);	000000100000
print	000000100001
arr	000000100010
int	000000100011
size);	00000010010
size);	00000010011
"-b"	0000001010
root->data);	0000001011
0	000000110
root->data);	000000111
*right	00000100000
'd'	00000100001
top);	00000100010
top	00000100011
2);	0000010010
array->token_list[i]->str);	0000010011
then	000001010
1000)	000001011
"-c"	00000110
codebook);	00000111
then	0000100000
ELF	0000100001
dir->d_name);	0000100010
buffer);	0000100011
dir->d_name);	000010010
buffer	000010011
top);	00001010
'	00001011
file_name	0000110
freq	0000111
size);	000100000
13	000100001
int	000100010
freq	000100011
0666);	00010010
O_RDONLY);	00010011
int	0001010
fd);	0001011
*top;	000110
int	000111
9	00100000
ELF	00100001
16	00100010
O_RDONLY);	00100011
fd);	0010010
there	0010011
fullPath);	001010
not	001011
test2	00110
'c'	00111
45	0100000
12	0100001
0	0100010
r	0100011
outname);	010010
num);	010011
root->data	01010
str	01011
"dick"	0110
int	0111
p1	1000000
c	1000001
#include	1000010
strlen(buffer));	1000011
t);	100010
str);	10001100
strlen(root->data));	100011010
"bitchesssss"	1000110110000
1000)	1000110110001
dir->d_name);	1000110110010
buffer	10001101100110
12	100011011001110
16	100011011001111
path);	1000110110100
nums	1000110110101
p2	10001101101100
t);	1000110110110100
t);	10001101101101010
dir->d_name);	100011011011010110
size);	1000110110110101110
int	10001101101101011110
"cock"	100011011011010111110
#include	1000110110110101111110
str);	10001101101101011111110
ELF	100011011011010111111110
9	1000110110110101111111110
const	10001101101101011111111110
13	100011011011010111111111110
p2	1000110110110101111111111110
45	10001101101101011111111111110
"/");	100011011011010111111111111110
MAXIMUM)	1000110110110101111111111111110
"test");	10001101101101011111111111111110
codebook->token_list[i]->num);	100011011011010111111111111111110
dir->d_name);	100011011011010111111111111111111
dir->d_name);	1000110110110110
buffer	10001101101101110
0666);	100011011011011110
file	1000110110110111110
c);	10001101101101111110
c	100011011011011111110
char	1000110110110111111110
int	100011011011011111111100
INT_MAX)>0){	1000110110110111111111010
struct	10001101101101111111110110
p1	100011011011011111111101110
'&&	1000110110110111111111011110
int	10001101101101111111110111110
unsigned	10001101101101111111110111111
file	100011011011011111111110
char	1000110110110111111111110
outname);	10001101101101111111111110
O_RDONLY	100011011011011111111111110
int	1000110110110111111111111110
".");	10001101101101111111111111110
int	100011011011011111111111111110
struct	10001101101101111111111111111100
0);	100011011011011111111111111111010
s[p2]);	1000110110110111111111111111110110
char	10001101101101111111111111111101110
smallest);	100011011011011111111111111111011110
0666);	1000110110110111111111111111110111110
&minHeap->array[idx]);	10001101101101111111111111111101111110
sizeof(char));	100011011011011111111111111111011111110
whitespace	1000110110110111111111111111110111111110
strlen(str))	10001101101101111111111111111101111111110
dir->d_name);	10001101101101111111111111111101111111111
ArrayList	10001101101101111111111111111110
0666);	100011011011011111111111111111110
O_WRONLY	1000110110110111111111111111111110
i);	100011011011011111111111111111111100
path);	1000110110110111111111111111111111010
'	1000110110110111111111111111111111011
"\\\n"	100011011011011111111111111111111110
int	1000110110110111111111111111111111110
O_WRONLY	10001101101101111111111111111111111110
size);	100011011011011111111111111111111111110
int	1000110110110111111111111111111111111110
O_WRONLY	10001101101101111111111111111111111111110
freq	100011011011011111111111111111111111111110
"/");	10001101101101111111111111111111111111111100
}	100011011011011111111111111111111111111111010
buffer);	1000110110110111111111111111111111111111110110
top	10001101101101111111111111111111111111111101110
ArrayList	100011011011011111111111111111111111111111011110
0666);	1000110110110111111111111111111111111111110111110
"%d"	10001101101101111111111111111111111111111101111110
2);	100011011011011111111111111111111111111111011111110
int	1000110110110111111111111111111111111111110111111110
int	10001101101101111111111111111111111111111101111111110
s[p2]);	10001101101101111111111111111111111111111101111111111
char	10001101101101111111111111111111111111111110
tokenize:	100011011011011111111111111111111111111111110
filePath);	1000110110110111111111111111111111111111111110
PARENT)	10001101101101111111111111111111111111111111110
O_RDONLY);	100011011011011111111111111111111111111111111110
".hcz");	1000110110110111111111111111111111111111111111110
O_RDONLY);	10001101101101111111111111111111111111111111111110
HOME)	100011011011011111111111111111111111111111111111110
flagValues[i]);	10001101101101111111111111111111111111111111111111100
flags[i]	100011011011011111111111111111111111111111111111111010
flags[j])==0){	1000110110110111111111111111111111111111111111111110110
"-d"};	100011011011011111111111111111111111111111111111111011100
char	1000110110110111111111111111111111111111111111111110111010
freq[i]);	10001101101101111111111111111111111111111111111111101110110
int	10001101101101111111111111111111111111111111111111101110111
decompress};	1000110110110111111111111111111111111111111111111110111100
const	10001101101101111111111111111111111111111111111111101111010
".hcz");	10001101101101111111111111111111111111111111111111101111011
int	1000110110110111111111111111111111111111111111111110111110
fullPath);	1000110110110111111111111111111111111111111111111110111111
argv[1+numFlags]);	10001101101101111111111111111111111111111111111111110
HOME)	100011011011011111111111111111111111111111111111111110
1);	10001101101101111111111111111111111111111111111111111100
"\n"	100011011011011111111111111111111111111111111111111111010
#include	1000110110110111111111111111111111111111111111111111110110
dir->d_name);	10001101101101111111111111111111111111111111111111111101110
arr[i]);	100011011011011111111111111111111111111111111111111111011110
1);	1000110110110111111111111111111111111111111111111111110111110
int	10001101101101111111111111111111111111111111111111111101111110
"\t"	100011011011011111111111111111111111111111111111111111011111110
1);	1000110110110111111111111111111111111111111111111111110111111110
top	10001101101101111111111111111111111111111111111111111101111111110
str	100011011011011111111111111111111111111111111111111111011111111110
int	1000110110110111111111111111111111111111111111111111110111111111110
arr[i]);	1000110110110111111111111111111111111111111111111111110111111111111
outname);	10001101101101111111111111111111111111111111111111111110
int	1000110110110111111111111111111111111111111111111111111100
compress	10001101101101111111111111111111111111111111111111111111010
int	10001101101101111111111111111111111111111111111111111111011
file_name);	1000110110110111111111111111111111111111111111111111111110
file_name	1000110110110111111111111111111111111111111111111111111111
fullPath);	10001101101110
codebook->token_list[i]->str)==0){	100011011011110
t->num);	1000110110111110
"%d"	100011011011111100
PARENT)	1000110110111111010
buffer	1000110110111111011
\	1000110110111111100
#include	1000110110111111101
dir->d_name);	1000110110111111110
"faded"	10001101101111111110
"/");	100011011011111111110
"error"	100011011011111111111
#include	1000110111
'f'	1000111
top);	100100000
arr	100100001
freq	100100010
p1	100100011
outname);	10010010
"\n"	10010011
buffer	1001010
ar"copying	1001011
0};	100110
left->freq	100111
arr	10100000
top	10100001
NULL);	10100010
arr	10100011
int	1010010
buffer);	1010011
top	101010
1000);	101011
'b'	10110
ELF	10111
'e'	1100000
file_len)	1100001
'&&	1100010
size);	1100011
top	110010
token	110011
O_WRONLY	11010
&st);	11011
print	1110
int	1111

11101100110
1);	000000010000000000010100111111111111111111111111111111111111111111111111111111011001110
arr[i]);	0000000100000000000101001111111111111111111111111111111111111111111111111111110110011110
"\n"	00000001000000000001010011111111111111111111111111111111111111111111111111111101100111110
const	000000010000000000010100111111111111111111111111111111111111111111111111111111011001111110
int	0000000100000000000101001111111111111111111111111111111111111111111111111111110110011111110
int	00000001000000000001010011111111111111111111111111111111111111111111111111111101100111111110
"test");	000000010000000000010100111111111111111111111111111111111111111111111111111111011001111111110
int	0000000100000000000101001111111111111111111111111111111111111111111111111111110110011111111110
int	00000001000000000001010011111111111111111111111111111111111111111111111111111101100111111111110
*right	000000010000000000010100111111111111111111111111111111111111111111111111111111011001111111111110
dir->d_name);	0000000100000000000101001111111111111111111111111111111111111111111111111111110110011111111111110
PARENT)	00000001000000000001010011111111111111111111111111111111111111111111111111111101100111111111111110
outname);	000000010000000000010100111111111111111111111111111111111111111111111111111111011001111111111111110
dir->d_name);	0000000100000000000101001111111111111111111111111111111111111111111111111111110110011111111111111110
not	00000001000000000001010011111111111111111111111111111111111111111111111111111101100111111111111111110
left->freq	000000010000000000010100111111111111111111111111111111111111111111111111111111011001111111111111111110
top);	0000000100000000000101001111111111111111111111111111111111111111111111111111110110011111111111111111110
int	00000001000000000001010011111111111111111111111111111111111111111111111111111101100111111111111111111110
int	000000010000000000010100111111111111111111111111111111111111111111111111111111011001111111111111111111110
int	0000000100000000000101001111111111111111111111111111111111111111111111111111110110011111111111111111111110
arr	00000001000000000001010011111111111111111111111111111111111111111111111111111101100111111111111111111111110
dir->d_name);	000000010000000000010100111111111111111111111111111111111111111111111111111111011001111111111111111111111110
"/");	0000000100000000000101001111111111111111111111111111111111111111111111111111110110011111111111111111111111110
1000);	00000001000000000001010011111111111111111111111111111111111111111111111111111101100111111111111111111111111110
buffer);	00000001000000000001010011111111111111111111111111111111111111111111111111111101100111111111111111111111111111
char	000000010000000000010100111111111111111111111111111111111111111111111111111111011010
O_RDONLY);	000000010000000000010100111111111111111111111111111111111111111111111111111111011011
arr[i]);	0000000100000000000101001111111111111111111111111111111111111111111111111111110111
'&&	00000001000000000001010011111111111111111111111111111111111111111111111111111110
".");	000000010000000000010100111111111111111111111111111111111111111111111111111111110
file_name);	000000010000000000010100111111111111111111111111111111111111111111111111111111111000
buffer	000000010000000000010100111111111111111111111111111111111111111111111111111111111001
ArrayList	00000001000000000001010011111111111111111111111111111111111111111111111111111111101
array);	0000000100000000000101001111111111111111111111111111111111111111111111111111111111
dir->d_name);	000000010000000000010101
9	000000010000000000010110
s[p2]);	0000000100000000000101110
'd'	00000001000000000001011110
MAXIMUM)	000000010000000000010111110
PARENT)	00000001000000000001011111100
buffer	00000001000000000001011111101
'c'	0000000100000000000101111111
"faded"	000000010000000000011
int	0000000100000000001
p2	000000010000000001
str);	00000001000000001
c	0000000100000001
token	000000010000001
s[p2]);	00000001000001
0};	0000000100001
top	000000010001
print	00000001001
struct	0000000101
unsigned	000000011
ELF	0000001000000000000
t);	0000001000000000001
root->data);	000000100000000001
top);	00000010000000001
"error"	0000001000000001
"cock"	000000100000001
t);	00000010000001
#include	0000001000001
r	000000100001
top	00000010001
top	0000001001
then	000000101
int	00000011
"/");	000001000000000000
fd);	000001000000000001
str);	00000100000000001
arr	0000010000000001
ArrayList	000001000000001
size);	00000100000001
test2	0000010000001
INT_MAX)>0){	000001000001
12	00000100001
p1	0000010001
tokenize:	000001001
'&&	00000101
'&&	0000011
0);	00001000000000000
&minHeap->array[idx]);	00001000000000001
smallest);	0000100000000001
i);	000010000000001
dir->d_name	00001000000001
&st);	0000100000001
"/");	000010000001
1);	00001000001
freq	0000100001
there	000010001
file_len);	00001001
1000)	0000101
top	000011
size);	0001000000000000
O_RDONLY);	0001000000000001
top	000100000000001
whitespace	00010000000001
t);	0001000000001
"dick"	000100000001
array->token_list[i]->str);	00010000001
size);	0001000001
16	000100001
freq	00010001
top	0001001
dir->d_name);	000101
int	00011
int	001000000000000
size);	001000000000001
p1	00100000000001
"bitchesssss"	0010000000001
p1	001000000001
t->num);	00100000001
path);	0010000001
dir->d_name);	001000001
c);	00100001
num);	0010001
'	001001
int	00101
9	0011
int	01000000000000
"\n"	01000000000001
struct	0100000000001
str	010000000001
'	01000000001
int	0100000001
p2	010000001
char	01000001
45	0100001
freq[i]);	010001
2);	01001
c	0101
file	011
str);	1000000000000
p2	1000000000001
13	100000000001
arr	10000000001
top);	1000000001
int	100000001
outname);	10000001
arr	1000001
".hcz");	100001
fd);	10001
*top;	1001
array);	101
buffer	11
